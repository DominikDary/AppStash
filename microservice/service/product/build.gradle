apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'pkg-debian'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/gesellix/gradle-plugins"
        }
    }
    dependencies {
        classpath "de.gesellix:gradle-debian-plugin:14"
    }
}
 
jar.baseName = "product-microservice"

idea {
    module {
        name='product-microservice'
    }
}


mainClassName = "io.github.appstash.shop.service.product.Boot"
 
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spray.io/'
    }
    maven {
        url 'http://repo.typesafe.com/typesafe/releases/'
    }
}

dependencies {
    //please extract version numbers and don't forget main gradle
    compile "org.scala-lang:scala-library:$scalaVersion"
    compile "com.typesafe.akka:akka-actor_2.10:$akkaVersion"
    compile "io.spray:spray-can:$sprayVersion"
    compile "io.spray:spray-routing:$sprayVersion"
    compile "io.spray:spray-json_2.10:1.2.6"
    compile "org.scalaz:scalaz-core_2.10:7.0.6"
    compile "com.typesafe:config:1.0.2"
    compile "org.reactivemongo:reactivemongo_2.10:0.10.0"
    testCompile "com.typesafe.akka:akka-testkit_2.10:$akkaVersion"
    testCompile "org.specs2:specs2_2.10:2.3.12"
    testCompile "io.spray:spray-testkit:$sprayVersion"
}
 
task stage(dependsOn: ['clean', 'installApp'])

def debName = "product"
debian {
    packagename = debName
    publications = ['mavenStuff']
    controlDirectory = "${projectDir}/debian/control"
    changelogFile = "${projectDir}/debian/changelog"
    outputFile = "${buildDir}/debian/${debName}_${version}.deb"

    data {
        dir {
            name = "${projectDir}/debian/data"
            exclusions = ["**/.DS_Store", "changelog"]
        }
        dir {
            name = "${buildDir}/debian-data/"
            exclusions = ["**/.DS_Store"]
        }
        file {
            name = "${projectDir}/src/main/resources/application.conf"
            target = "etc/product/application.conf"
            mapper {
                fileMode = "755"
            }
        }
    }
}

task prepareDeb {
    dependsOn installApp

    copy {
        from "${buildDir}/install/"
        into "${buildDir}/debian-data/usr/share/"
    }
}
