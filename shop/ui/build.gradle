apply plugin: "groovy"
apply plugin: 'war'
apply plugin: 'jetty'


idea {
    module {
        name = 'ui'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/webapp'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}

repositories {
    jcenter()
}

def gebVersion = "0.9.2"
def seleniumVersion = "2.42.2"

// The drivers we want to use
ext.drivers = ["firefox"] //, "chrome"]

dependencies {
    compile "net.logstash.logback:logstash-logback-encoder:2.5"

    compile wicketDeps
    compile webAppDeps

    compile project(':agent')
    compile project(':shop:service:authentication')
    compile project(':shop:service:basket')
    compile project(':shop:service:checkout')
    compile project(':shop:service:order')
    compile project(':shop:service:product')
    compile project(':shop:service:recommendation')
    compile project(':shop:service:user')
    // for generating sample data automatically on startup
    compile project(':common:dataloader')
    compile "com.github.fakemongo:fongo:$fongoVersion"
    //

    testCompile jettyDeps
    testCompile testDeps

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"
    testCompile "xerces:xercesImpl:2.8.1"
    testCompile "xml-apis:xml-apis:1.3.04"
    testCompile "org.apache.httpcomponents:httpclient:4.3.2"

    // Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

[jettyRun, jettyRunWar]*.with {
    httpPort = 8888
    stopPort = 8889
    contextPath = "pizza"
}

jettyRun.doFirst {
    System.setProperty("spring.profiles.active", "default")
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"

        doFirst {
            jettyRun.httpPort = 8888    // Port for test
            jettyRun.daemon = true
            jettyRun.execute()
        }
        doLast {
            jettyStop.stopPort = 8889   // Port for stop signal
            jettyStop.stopKey = 'stopKey'
            jettyStop.execute()
        }
    }
}

/*
test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}
*/
