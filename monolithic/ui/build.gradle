import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'jmeter'

war{
    archiveName = "monolithic-shop.war"
}

idea {
    module {
        name = 'ui'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.kulya:jmeter-gradle-plugin:1.3.2-2.9"
    }
}


sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/webapp'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
            srcDir 'src/test/resources'
            srcDir 'src/ui-test/groovy'
            srcDir 'src/test/load'
        }
    }
}

repositories {
    jcenter()
}

// The drivers we want to use
ext.drivers = ["firefox"] //, "chrome"]

dependencies {
    compile "net.logstash.logback:logstash-logback-encoder:2.5"

    compile springSecurityDeps
    compile wicketDeps
    compile webAppDeps

    compile project(':agent')
    compile project(':monolithic:service:authentication')
    compile project(':monolithic:service:basket')
    compile project(':monolithic:service:checkout')
    compile project(':monolithic:service:order')
    compile project(':monolithic:service:product')
    compile project(':monolithic:service:recommendation')
    compile project(':monolithic:service:user')
    // for generating sample data automatically on startup
    compile project(':monolithic:common:dataloader')
    compile "com.github.fakemongo:fongo:$fongoVersion"
    //

    testCompile jettyDeps
    testCompile testDeps

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"
    testCompile "xerces:xercesImpl:2.8.1"
    testCompile "xml-apis:xml-apis:1.3.04"
    testCompile "org.apache.httpcomponents:httpclient:4.3.2"

    // Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

[jettyRun, jettyRunWar]*.with {
    httpPort = 8080
    stopPort = 8081
    contextPath = "pizza"
}

jettyRun.doFirst {
    if(!Boolean.getBoolean('spring.profiles.active')){
        System.setProperty("spring.profiles.active", "default")
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        include '**/*Spec*'

        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"

        //doFirst {
        //    System.setProperty("spring.profiles.active", "test")
        //    jettyRun.httpPort = 8888    // Port for test
        //    jettyRun.daemon = true
        //    jettyRun.execute()
        //}
        //doLast {
        //    jettyStop.stopPort = 8889   // Port for stop signal
        //    jettyStop.stopKey = 'stopKey'
        //    jettyStop.execute()
        //}
    }
}


//test {
    //exclude '**/*Spec*'
//}

jmeterRun.configure {
    jmeterPropertyFile = file("${projectDir}/src/test/load/jmeter.properties")
    jmeterTestFiles = [file("src/test/load/loadtest.jmx")]

    doFirst {
        def scheduledThreadPool = Executors.newScheduledThreadPool(0)
        scheduledThreadPool.schedule(new Runnable() {
            @Override
            void run() {
                org.apache.jmeter.util.ShutdownClient.main('StopTestNow')
            }
        }, 60, TimeUnit.SECONDS)
    }
}
